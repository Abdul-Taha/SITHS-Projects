Encoders

#include <PRIZM.h>
PRIZM prizm;    
void setup () {
  
  prizm.PrizmBegin();        //initailize PRIZM
  prizm.setMotorInvert(1,1);
  Serial.begin(9600);         // configure the bserial monitor for 9600 buad rate

}

void loop() {                    //this code repeats in a loop
prizm.setMotorDegrees(360,1155, 360,1155);  //gofoward 3ft and 2 inches
delay(3300);
prizm.resetEncoders();
prizm.setMotorDegree(1, 360,580);  //turn 90 degrees
delay(1700);
prizm.resetEncoders();
prizm.setMotorDegrees(360,1530, 360,1530);  //gofoward 4ft and 2 inches
delay(4300);
prizm.resetEncoders();
prizm.setMotorDegree(1, 360,580);  //turn 90 degrees
delay(1700);
prizm.resetEncoders();
prizm.setMotorDegrees(360,1540, 360,1540);  //gofoward 4ft and 2 inches
delay(4300);;
prizm.resetEncoders();
prizm.setMotorDegree(1,360,580);  //turn 90 degrees
delay(1700);
prizm.resetEncoders();
prizm.setMotorDegrees(360,1565, 360,1565);  //gofoward 4ft and 2 inches
delay(4600);
prizm.resetEncoders();
prizm.setMotorDegree(1,360,560);  //turn 90 degrees
delay(1700);
prizm.resetEncoders();
prizm.setMotorDegrees(360,410, 360,410);  //gofoward 1ft
delay(1300);
prizm.resetEncoders();
prizm.PrizmEnd();
}


Functions

  #include <PRIZM.h>    // include the PRIZM library in the sketch
  PRIZM prizm;          // instantiate a PRIZM object “prizm” so we can use its functions
void movement() {
  prizm.setMotorDegrees(288,1080, 288,1080); 
  delay(1000);
  prizm.resetEncoders();
  delay(500);
  prizm.setMotorDegrees(288,-1080, 288,-1080); 
  delay(1000);
  prizm.resetEncoders();
  }
void lights() {
  prizm.setRedLED(HIGH);
  delay(50);
  prizm.setRedLED(LOW);
  delay(50);
  }
void setup() {        

  prizm.PrizmBegin();   // Initialize the PRIZM controller
  prizm.setMotorInvert(1,1);
}
 void loop() {
  for(int x = 0;x<60;x++){
    lights();
    }
  for(int x=0;x<4;x++) {
    movement();
    }
    prizm.PrizmEnd();
 }


Sensors

#include <PRIZM.h>
PRIZM prizm;    
void setup () {
  
  prizm.PrizmBegin();        //initailize PRIZM
  prizm.setMotorInvert(1,1);

}

void loop() {
  
 if(prizm.readSonicSensorCM (5) > 25) {
  prizm.setMotorPowers(50,50);
  prizm.setRedLED(LOW);
  prizm.setRedLED(HIGH);
 
 }
else
{
 prizm.setRedLED(LOW);
  prizm.setRedLED(HIGH);
 prizm.setMotorPowers(125, 125);
 delay(500);
 prizm.setMotorPowers(-35, -35);
 delay(1000);
 prizm.setMotorPowers(125, 125);
 delay(500);
 prizm.setMotorPowers(35, -35);
 delay(500);
 }
}
  
Line Follower & Servo

#include <PRIZM.h>
PRIZM prizm;    
void setup () {
  
  prizm.PrizmBegin();        //initailize PRIZM
  prizm.setMotorInvert(1,1);

}

void loop() {
  
 if(prizm.readLineSensor(4) == 0) {
  prizm.setMotorPowers(-10, 20);
 }

 if(prizm.readLineSensor(4) == 1) {
 prizm.setMotorPowers(20, -10);
   }
  }
}

#include <PRIZM.h>
PRIZM prizm;   

void followline(){
while(true){
if(prizm.readLineSensor(4) == 0) {
prizm.setMotorPowers(-10, 20);
}

if(prizm.readLineSensor(4) == 1) {
prizm.setMotorPowers(20, -10);
}}
}

void flagup(){
if(prizm.readServoPosition(1) > 0){
  prizm.setServoPosition(1,0); 
  delay(1300); 
}
}
void flagdown(){
if(prizm.readServoPosition(1) < 90){
  prizm.setServoPosition(1,90);  
  delay(1300);   
}
}
void setup () {
  
  prizm.PrizmBegin();        //initailize PRIZM
  prizm.setMotorInvert(1,1);

}

void loop() {
while(prizm.readLineSensor(4) == 0){
 if(prizm.readSonicSensorCM (5) > 25) {
  flagdown();
  prizm.setMotorPowers(20,20);
  prizm.setRedLED(HIGH);
 }
 else{
  flagup();
  prizm.setRedLED(LOW);
  prizm.setMotorPowers(125, 125);
  delay(500);
 }
}
while(true) {
 if(prizm.readSonicSensorCM (5) > 25){
  flagdown();
  followline();
 }
 else{
  prizm.setMotorPowers(125,125);
  flagup();  
 }
}

}





Final code:

#include <PRIZM.h>

PRIZM prizm;

void setup () {
  prizm.PrizmBegin(); 
  //initailize PRIZM
  prizm.setServoSpeed(1,20);
  prizm.setMotorInvert(1,1);
  Serial.begin(9600);
}

void loop() {
foward(1);
stpatline("fwd");
delay(1000);
followline("right","yes",999,16);
backward(2);
turn("left",90);
stpatline("fwd");
turn("left",90);                   /* i love geferson ry*/
delay(1000);
flagdown();
delay(1000);
focusline();
delay(1000);
flagup();
delay(1000);
backward(1.5);
turn("right",110);
foward(6.55);
turn("left",85);  
foward(6.3);
delay(1000);
followline("right","yes",999,35);
turn("left",70);
foward(3.7);
delay(1000);
prizm.setServoPosition(1,0);  
delay(1300);  
flagup();
backward(1);
turn("left",60);
foward(3);
turn("right",85);
foward(2);
turn("left",100);
foward(11.5);
turn("left",88);
foward(7);
delay(1000);
stpatline("fwd");
delay(1000);
followline("left","yes",999,42);
delay(1000);
turn("right",44);
foward(3);
turn("left",90);
foward(1);
turn("right",85);
foward(4);
turn("left",30);
stpatline("fwd");
prizm.PrizmEnd();
}

void followline(String direct,String input, int sec,int dist){
 if(direct = "right"){
  if(input == "no"){
    int start = millis()+(sec*1000);
    while(millis() < start){
      if(prizm.readLineSensor(4) == 0) {
        prizm.setMotorPowers(125, 30);
      }
      if(prizm.readLineSensor(4) == 1) {
        prizm.setMotorPowers(30, 125);
      }
    }
   }
  if(input == "yes"){
    int start = millis()+(sec*1000);
    while(millis() < start and prizm.readSonicSensorCM (3) > dist){
      if(prizm.readLineSensor(4) == 0) {
        prizm.setMotorPowers(125, 30);
      }
      if(prizm.readLineSensor(4) == 1) {
        prizm.setMotorPowers(30, 125);
      }
    }
    prizm.setMotorPowers(125, 125);
 }
 }
 if(direct = "left"){
  if(input == "no"){
    int start = millis()+(sec*1000);
      while(millis() < start){
        if(prizm.readLineSensor(4) == 0) {
          prizm.setMotorPowers(30, 125);
        }
        if(prizm.readLineSensor(4) == 1) {
          prizm.setMotorPowers(125, 30);
        }
      }
   }
  if(input == "yes"){
    int start = millis()+(sec*1000);
      while(millis() < start and prizm.readSonicSensorCM (3) > dist){
        if(prizm.readLineSensor(4) == 0) {
          prizm.setMotorPowers(30, 125);
        }
        if(prizm.readLineSensor(4) == 1) {
          prizm.setMotorPowers(125, 30 );
        }
      }
      prizm.setMotorPowers(125, 125);
    }
  }
  prizm.resetEncoders();
 }
int foward(int feet){
  prizm.setMotorDegrees(295,feet*360, 288,feet*360); 
  int wait = (((feet*360)/288)*1000)+300;
  delay(wait);
  prizm.resetEncoders();
}
int backward(int feet){
  prizm.setMotorDegrees(295,-feet*360, 288,-feet*360); 
  int wait = (((feet*360)/288)*1000)+300;
  delay(wait);
  prizm.resetEncoders();
}
int turn(String direct, int degree){
  if(direct == "right"){
    prizm.setMotorDegree(1,360,6.6*degree);  //turn 90 degrees
    delay((((6.5*degree)/360)*1000)+600);
    prizm.resetEncoders();
  }
  if(direct == "left"){
    prizm.setMotorDegree(2,360,6.6*degree);  //turn 90 degrees
    delay((((6.5*degree)/360)*1000)+600);
    prizm.resetEncoders();
  }
}

void stpatline(String direct){
  if(direct == "bck"){
  while(prizm.readLineSensor(4) < 1){
  prizm.setMotorPowers(-15,-15);}
  prizm.setMotorPowers(125,125);}
  if(direct == "fwd"){
  while(prizm.readLineSensor(4) < 1){
  prizm.setMotorPowers(15,15);}
  prizm.setMotorPowers(125,125);}
}

void flagup(){
  if(prizm.readServoPosition(1) < 150 or prizm.readServoPosition(1) > 150){
    prizm.setServoPosition(1,120); 
    delay(1300); 
  } 
}
void flagdown(){
  if(prizm.readServoPosition(1) > 75 or prizm.readServoPosition(1) < 75 ){
    prizm.setServoPosition(1,75);  
    delay(1300);   
  }
}
void stpatobst(int cm) {
while(prizm.readSonicSensorCM (3) > cm) {
  prizm.setMotorPowers(20,20);
 }
  prizm.setMotorPowers(125, 125);
}
void focusline(){
  while(prizm.readSonicSensorCM (3) > 16){
    if(prizm.readLineSensor(4) == 0) {
      prizm.setMotorPowers(-10, 20);
    }
    if(prizm.readLineSensor(4) == 1) {
        prizm.setMotorPowers(20, -10);
    }
  }
  prizm.setMotorPowers(125, 125);
}

/*foward(4);
turn("left",27);
stpatline("fwd");
followline("left","yes",999,42);
turn("right",44);
foward(3);
turn("left",90);
foward(1);
turn("right",85);
foward(4);
stpatline("fwd");*/
